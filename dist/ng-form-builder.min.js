/*!
 * ng-form-builder
 * Version: 1.0.3
 * Fusiform, Inc. https://www.fusiform.co/
 */
angular.module("formBuilder",["ngSanitize","diagramInput"]).directive("formBuilder",function($templateCache,$compile){return{restrict:"E",templateUrl:"templates/form.html",scope:{schema:"=",model:"=",disabled:"=",debounce:"="},link:function(scope,element,attr){if(!scope.schema)throw new Error("Must be instantiated with a schema.");scope.form_id=scope.schema.step_id+"_"+scope.schema.stage_id,scope.submitted=!1,scope.getValidity=function(){return scope[scope.form_id].$valid},scope.submit=function(){scope.submitted=!0,scope.$emit("form-submit",scope.form_id,scope[scope.form_id].$valid)}},controller:["$scope",function($scope){}]}}).directive("formBuilderElement",function($templateCache,$compile,$sanitize,$parse){return{restrict:"E",require:["^formBuilder"],templateUrl:"templates/element.html",scope:{formElement:"=",formId:"=",schema:"=",model:"=",disabled:"=",debounce:"=",submitted:"="},link:function(scope,element,attr,controllers){var schemaTypeTemplateMap={string:"templates/input.html",number:"templates/input.html",array:"templates/checkboxes.html",boolean:"templates/checkbox.html"},formTypeTemplateMap={radios:"templates/radios.html",select:"templates/select.html",textarea:"templates/textarea.html"};controllers[0];if(!scope.formElement)throw new Error("Must be instantiated with form object.");if(!scope.model)throw new Error("Must be instantiated with model object.");if(scope.checkFieldCondition=function(){if(/^model\[(.*)\](.*)$/.test(scope.formElement.condition))return $parse(scope.formElement.condition)(scope);throw new Error("Ignoring malformed condition statement.\n")},scope.formElement.key){if(scope.key=scope.formElement.key,scope.properties=scope.schema.fields[scope.key],!scope.properties)throw new Error("Could not find properties of field in schema.");scope.formElement.type?scope.fieldTemplate=formTypeTemplateMap[scope.formElement.type]:scope.fieldTemplate=schemaTypeTemplateMap[scope.properties.type]}else if("section"==scope.formElement.type)scope.fieldTemplate="templates/section.html",scope.subElement=scope.formElement.items;else if("diagram"==scope.formElement.type)scope.fieldTemplate="templates/diagram.html",scope.items=scope.formElement.items,scope.schemas={},scope.formElement.items.forEach(function(item){scope.schemas[item.key]=scope.schema.fields[item.key]});else if("html"==scope.formElement.type){for(var i=0;$templateCache.get("form-html"+i+".html");)i++;$templateCache.put("form-html"+i+".html",scope.formElement.html),scope.fieldTemplate="form-html"+i+".html"}else{if("submit"!=scope.formElement.type)throw new Error("Bad element type given.");scope.fieldTemplate="templates/submit.html"}}}}),angular.module("diagramInput",[]).directive("diagramInput",function(){return{restrict:"E",templateUrl:"templates/diagram-container.html",scope:{schema:"=",inputs:"=",model:"=",image:"=",maxWidth:"=",disabled:"=",debounce:"="},link:function(scope,element,attr){scope.imageHeight=0,scope.imageWidth=0,scope.focusedField={},scope.$watch(function(){var measuredWidth=element[0].firstChild.clientWidth;scope.imageWidth=measuredWidth>scope.maxWidth?scope.maxWidth:measuredWidth,scope.imageHeight=element[0].firstChild.clientHeight}),angular.element(window).on("resize",function(){scope.$apply()});var imageLoader=new Image;imageLoader.src=scope.image,imageLoader.onload=function(){scope.$apply()}},controller:["$scope",function($scope){}]}}).directive("diagramInputField",function($parse){return{restrict:"E",require:["^diagramInput"],templateUrl:"templates/diagram-field.html",scope:{properties:"=",formElement:"=",model:"=",imageHeight:"=",imageWidth:"=",disabled:"=",debounce:"=",focusedField:"="},link:function(scope,element,attr,controllers){scope.fontScaleFactor=function(str){for(var scaling=1;str&&8*str.toString().length*scaling>scope.imageWidth*(scope.formElement.x2-scope.formElement.x1);)scaling*=.9;return scaling},scope.scaledHeight=function(){return Math.round(scope.imageHeight*(scope.formElement.y2-scope.formElement.y1))},scope.scaledWidth=function(){return Math.round(scope.imageWidth*(scope.formElement.x2-scope.formElement.x1))};var computedRelMin,computedRelMax,absMin=scope.properties.min,absMax=scope.properties.max,parsedRelMinFn=null,parsedRelMaxFn=null;if(scope.properties.relMin)try{parsedRelMinFn=$parse(scope.properties.relMin)}catch(e){}if(scope.properties.relMax)try{parsedRelMaxFn=$parse(scope.properties.relMax)}catch(e){}scope.getMinValue=function(){try{return computedRelMin=parsedRelMinFn(scope),computedRelMin>absMin?computedRelMin:absMin}catch(e){return absMin}},scope.getMaxValue=function(){try{return computedRelMax=parsedRelMaxFn(scope),computedRelMax<absMax?computedRelMax:absMax}catch(e){return absMax}}}}}),angular.module("formBuilder").run(["$templateCache",function($templateCache){$templateCache.put("templates/checkbox.html",'<div class="form-group form-element">\t<div class="checkbox custom-control custom-checkbox">\t\t<label>\t\t\t<input type="checkbox" ng-model="model[key]" ng-disabled="disabled">\t\t\t<span class="custom-control-indicator"></span>{{properties.title}}\t\t</label>\t</div></div>'),$templateCache.put("templates/checkboxes.html",'<div class="form-group form-element">\t<label>{{properties.title}}<span ng-show="properties.required">&nbsp; Required</span></label>\t<div class="checkbox custom-control custom-checkbox" ng-repeat="o in properties.enum">\t\t<label>\t\t\t<input type="checkbox" ng-model="model[key][o]" value="{{o}}" ng-disabled="disabled">\t\t\t<span class="custom-control-indicator"></span>{{properties.map ? properties.map[o] : o}}\t\t</label>\t</div></div>'),$templateCache.put("templates/diagram-container.html",'<div class="diagram-input-container" ng-form="MeasurementsFormCtrl">    <div class="diagram-input">        <diagram-input-field ng-repeat="i in inputs" form-element="i" properties="schema[i.key]" model="model" image-height="imageHeight" image-width="imageWidth" disabled="disabled" debounce="debounce" focused-field="focusedField"></diagram-input-field>        <img class="diagram-input-image" ng-src="{{image}}" style="max-width: {{maxWidth}}px" alt="Measurement Diagram"/>    </div></div><p class="text-danger" ng-show="MeasurementsFormCtrl.$error.number || MeasurementsFormCtrl.$error.min || MeasurementsFormCtrl.$error.max">\t<span ng-show="MeasurementsFormCtrl[focusedField.key].$error.min">This measurement is less than the minimum acceptable value.</span>\t<span ng-show="MeasurementsFormCtrl[focusedField.key].$error.max">This measurement is greater than the maximum acceptable value.</span>\t<span ng-show="MeasurementsFormCtrl[focusedField.key].$error.number">Measurement must be a numeric value.</span>\t<span ng-hide="MeasurementsFormCtrl[focusedField.key].$error.min || MeasurementsFormCtrl[focusedField.key].$error.max || MeasurementsFormCtrl[focusedField.key].$error.number">Invalid measurements. Please correct the highlighted input.</span></p><p class="text-danger" ng-show="MeasurementsFormCtrl.$error.required && MeasurementsFormCtrl.$dirty">Please complete all required measurements.</p>'),$templateCache.put("templates/diagram-field.html",'<input name="{{formElement.key}}" ng-model="model[formElement.key]" type="number" ng-required="properties.required" ng-disabled="disabled" min="{{getMinValue()}}" max="{{getMaxValue()}}" autocomplete="off" ng-model-options="{\'debounce\':debounce}" ng-focus="focusedField.key = formElement.key" ng-blur="focusedField.key = null" class="diagram-input-field" style="top: {{(formElement.y1) * 100}}%; left: {{(formElement.x1) * 100}}%; width: {{scaledWidth()}}px; height: {{scaledHeight()}}px; font-size: {{fontScaleFactor(model[formElement.key])}}em;">'),$templateCache.put("templates/diagram.html",'<div class="form-group form-element">\t<label>{{properties.title}}</label>    <diagram-input schema="schemas" inputs="items" model="model" image="formElement.image" max-width="formElement.maxWidth" disabled="disabled" debounce="debounce"></div>'),$templateCache.put("templates/element.html",'<div ng-if="formElement.condition ? checkFieldCondition() : true" ng-form="field" ng-include="fieldTemplate"></div>'),$templateCache.put("templates/form.html",'<form name="{{form_id}}" id="{{form_id}}" ng-submit="submit()">\t<ng-repeat ng-repeat="elem in schema.form">\t\t<form-builder-element schema="schema" form-id="form_id" form-element="elem" model="model" form-controller-object="getFormControllerObject(formElement.key)" disabled="disabled" debounce="debounce" submitted="submitted"></form-builder-element>\t</ng-repeat></form>'),$templateCache.put("templates/input.html",'<div class="form-group form-element">\t<label ng-class="{\'text-danger\': field[key].$invalid && (field[key].$dirty || submitted)}">{{properties.title}}\t<span ng-show="properties.required">&nbsp; Required</span>\t\t<span ng-show="field[key].$invalid && !field[key].$error.required">&nbsp; Invalid input</span>\t</label>\t<input ng-required="properties.required" ng-disabled="disabled" class="form-control" name="{{key}}" ng-model="model[key]" ng-model-options="{\'debounce\':debounce}" ng-pattern="properties.pattern" type="text"></div>'),$templateCache.put("templates/radios.html",'<div class="form-group form-element">\t<label ng-class="{\'text-danger\': field[key].$invalid && (field[key].$dirty || submitted)}">{{properties.title}}<span ng-show="properties.required">&nbsp; Required</span></label>\t<div class="radio-buttons-group btn-group">\t\t<label ng-class="{\'btn-primary active\': o === model[key], \'disabled\': disabled}" class="btn btn-default" ng-repeat="o in properties.enum">\t\t\t<input type="radio" id="{{key+$index}}" value="{{o}}" name="{{key}}" ng-model="model[key]" ng-required="properties.required" ng-disabled="disabled" ng-hide="true">\t\t\t{{properties.map ? properties.map[o] : o}}\t\t</label>\t</div></div>'),$templateCache.put("templates/section.html",'<div class="form-section"><div class="row">\t<ng-repeat ng-repeat="elem in subElement">\t\t<form-builder-element schema="schema" form-id="formId" form-element="elem" model="model" disabled="disabled" debounce="debounce" form-controller="formController" submitted="submitted" class="{{elem.class ? elem.class : \'col-xs-12\'}}"></form-builder-element>\t</ng-repeat></div></div>'),$templateCache.put("templates/select.html",'<div class="form-group form-element">\t<label ng-class="{\'text-danger\': field[key].$invalid && (field[key].$dirty || submitted)}">{{properties.title}}<span ng-show="properties.required">&nbsp; Required</span></label>\t<select class="form-control" name="{{key}}" ng-model="model[key]" ng-required="properties.required" ng-disabled="disabled">\t\t<option ng-repeat="o in properties.enum">{{o}}</option>\t</select></div>'),$templateCache.put("templates/submit.html",'<div class="form-group form-element">\t<input class="btn btn-success" ng-disabled="disabled" type="submit" value="Save & Continue"></div>'),$templateCache.put("templates/textarea.html",'<div class="form-group form-element">\t<label ng-class="{\'text-danger\': field[key].$invalid && (field[key].$dirty || submitted)}">{{properties.title}}\t<span ng-show="properties.required">&nbsp; Required</span>\t\t<span ng-show="field[key].$invalid && !field[key].$error.required">&nbsp; Invalid input</span>\t</label>\t<textarea ng-required="properties.required" ng-disabled="disabled" class="form-control" name="{{key}}" ng-model="model[key]" ng-model-options="{\'debounce\':debounce}" ng-pattern="properties.pattern" rows="4"></div>')}]);